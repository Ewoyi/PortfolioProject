-- Cleaning Data in SQL Queries
-- Standardize date format

SELECT
    SaleDate,
    CONVERT(date,SaleDate)
FROM PortfolioProject..NashvilleHousing

-- Create a new column in the table

ALTER TABLE NashvilleHousing
Add SaleDateConverted DATE
;

UPDATE NashvilleHousing
SET SaleDateConverted = CONVERT(date,SaleDate)


-- Populate Property Address data

SELECT 
    a.ParcelID,
    a.PropertyAddress,
    b.ParcelID,
    b.PropertyAddress,
    ISNULL(
        a.PropertyAddress,
        b.PropertyAddress
    )
FROM PortfolioProject..NashvilleHousing a
    JOIN PortfolioProject..NashvilleHousing b
        ON a.ParcelID = b.ParcelID
        AND a.[UniqueID] <> b.[UniqueID]
    WHERE a.PropertyAddress IS NULL

UPDATE a
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM PortfolioProject..NashvilleHousing a
JOIN PortfolioProject..NashvilleHousing b
    ON a.ParcelID = b.ParcelID
        AND a.[UniqueID] <> b.[UniqueID]
    WHERE a.PropertyAddress IS NULL


-- Breaking out address into individual columns (Address, City, state)

SELECT
    PropertyAddress
FROM PortfolioProject..NashvilleHousing

SELECT
    SUBSTRING(
        PropertyAddress,
        1,
        CHARINDEX(',', PropertyAddress) -1
    ) AS Address,
    SUBSTRING(
        PropertyAddress,
        CHARINDEX(',', PropertyAddress) +1,
        LEN(PropertyAddress)
    ) AS Address
FROM PortfolioProject..NashvilleHousing


ALTER TABLE NashvilleHousing
Add PropertySplitAddress NVARCHAR(255)
;

UPDATE NashvilleHousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) - 1)


ALTER TABLE NashvilleHousing
Add PropertySplitCity NVARCHAR(255)
;

UPDATE NashvilleHousing
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1, LEN(PropertyAddress))


SELECT
    OwnerAddress
FROM PortfolioProject..NashvilleHousing

SELECT
PARSENAME(replace(OwnerAddress, ',', '.'), 3),
PARSENAME(replace(OwnerAddress, ',', '.'), 2),
PARSENAME(replace(OwnerAddress, ',', '.'), 1)
FROM PortfolioProject..NashvilleHousing


ALTER TABLE NashvilleHousing
Add OwnerSplitAddress NVARCHAR(255)
;

UPDATE NashvilleHousing
SET OwnerSplitAddress = PARSENAME(replace(OwnerAddress, ',', '.'), 3)

ALTER TABLE NashvilleHousing
Add OwnerSplitCity NVARCHAR(255)
;

UPDATE NashvilleHousing
SET OwnerSplitCity = PARSENAME(replace(OwnerAddress, ',', '.'), 2)

ALTER TABLE NashvilleHousing
Add OwnerSplitState NVARCHAR(255)
;

UPDATE NashvilleHousing
SET OwnerSplitState = PARSENAME(replace(OwnerAddress, ',', '.'), 1)


-- Change Y and N to Yes and No in "Sold as Vacant" field

SELECT
    distinct(SoldAsVacant),
    COUNT(SoldAsVacant)
FROM PortfolioProject..NashvilleHousing
    GROUP BY SoldAsVacant
    ORDER BY 2

SELECT
    SoldAsVacant,
    Case when SoldAsVacant = 'Y' then 'Yes'
        when SoldAsVacant = 'N' then 'No'
        else SoldAsVacant
        END
FROM PortfolioProject..NashvilleHousing

UPDATE NashvilleHousing
SET SoldAsVacant = Case when SoldAsVacant = 'Y' then 'Yes'
        when SoldAsVacant = 'N' then 'No'
        else SoldAsVacant
        END


-- Removing Duplicates

WITH RowNumCTE AS (
    SELECT 
        *,
        ROW_NUMBER() OVER (
            PARTITION BY ParcelID,
            PropertyAddress,
            SalePrice,
            SaleDate,
            LegalReference
            ORDER BY UniqueID
        ) Row_num
    FROM PortfolioProject..NashvilleHousing
)
DELETE
FROM RowNumCTE
WHERE row_num > 1
-- ORDER by PropertyAddress


-- Deleting Unused Columns

ALTER TABLE PortfolioProject..NashvilleHousing
DROP COLUMN
    OwnerAddress,
    PropertyAddress,
    TaxDistrict,
    SaleDate